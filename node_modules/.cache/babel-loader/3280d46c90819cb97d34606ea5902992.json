{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet'; // We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst createEmotionCache = (options, CustomSheet) => {\n  const cache = createCache(options); // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n\n  cache.sheet = new CustomSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\n\nlet cache;\n\nif (typeof document === 'object') {\n  // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order\n  // For more information, see https://github.com/mui/material-ui/issues/44597\n  let insertionPoint = document.querySelector('[name=\"emotion-insertion-point\"]');\n\n  if (!insertionPoint) {\n    insertionPoint = document.createElement('meta');\n    insertionPoint.setAttribute('name', 'emotion-insertion-point');\n    insertionPoint.setAttribute('content', '');\n    const head = document.querySelector('head');\n\n    if (head) {\n      head.prepend(insertionPoint);\n    }\n  }\n  /**\n   * This is for client-side apps only.\n   * A custom sheet is required to make the GlobalStyles API injected above the insertion point.\n   * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n   */\n\n\n  class MyStyleSheet extends StyleSheet {\n    insert(rule, options) {\n      if (this.key && this.key.endsWith('global')) {\n        this.before = insertionPoint;\n      }\n\n      return super.insert(rule, options);\n    }\n\n  }\n\n  cache = createEmotionCache({\n    key: 'css',\n    insertionPoint\n  }, MyStyleSheet);\n}\n\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    children\n  } = props;\n  return injectFirst && cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;","map":{"version":3,"names":["React","PropTypes","CacheProvider","createCache","StyleSheet","jsx","_jsx","createEmotionCache","options","CustomSheet","cache","sheet","key","nonce","container","speedy","isSpeedy","prepend","insertionPoint","document","querySelector","createElement","setAttribute","head","MyStyleSheet","insert","rule","endsWith","before","StyledEngineProvider","props","injectFirst","children","value","process","env","NODE_ENV","propTypes","node","bool"],"sources":["/Users/prashanthireddy/Desktop/portfolio/personal-portfolio/node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet';\n\n// We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst createEmotionCache = (options, CustomSheet) => {\n  const cache = createCache(options);\n\n  // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n  cache.sheet = new CustomSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\nlet cache;\nif (typeof document === 'object') {\n  // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order\n  // For more information, see https://github.com/mui/material-ui/issues/44597\n  let insertionPoint = document.querySelector('[name=\"emotion-insertion-point\"]');\n  if (!insertionPoint) {\n    insertionPoint = document.createElement('meta');\n    insertionPoint.setAttribute('name', 'emotion-insertion-point');\n    insertionPoint.setAttribute('content', '');\n    const head = document.querySelector('head');\n    if (head) {\n      head.prepend(insertionPoint);\n    }\n  }\n  /**\n   * This is for client-side apps only.\n   * A custom sheet is required to make the GlobalStyles API injected above the insertion point.\n   * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n   */\n  class MyStyleSheet extends StyleSheet {\n    insert(rule, options) {\n      if (this.key && this.key.endsWith('global')) {\n        this.before = insertionPoint;\n      }\n      return super.insert(rule, options);\n    }\n  }\n  cache = createEmotionCache({\n    key: 'css',\n    insertionPoint\n  }, MyStyleSheet);\n}\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    children\n  } = props;\n  return injectFirst && cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B,C,CAEA;AACA;;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,MAAMC,kBAAkB,GAAG,CAACC,OAAD,EAAUC,WAAV,KAA0B;EACnD,MAAMC,KAAK,GAAGP,WAAW,CAACK,OAAD,CAAzB,CADmD,CAGnD;;EACAE,KAAK,CAACC,KAAN,GAAc,IAAIF,WAAJ,CAAgB;IAC5BG,GAAG,EAAEF,KAAK,CAACE,GADiB;IAE5BC,KAAK,EAAEH,KAAK,CAACC,KAAN,CAAYE,KAFS;IAG5BC,SAAS,EAAEJ,KAAK,CAACC,KAAN,CAAYG,SAHK;IAI5BC,MAAM,EAAEL,KAAK,CAACC,KAAN,CAAYK,QAJQ;IAK5BC,OAAO,EAAEP,KAAK,CAACC,KAAN,CAAYM,OALO;IAM5BC,cAAc,EAAER,KAAK,CAACC,KAAN,CAAYO;EANA,CAAhB,CAAd;EAQA,OAAOR,KAAP;AACD,CAbD;;AAcA,IAAIA,KAAJ;;AACA,IAAI,OAAOS,QAAP,KAAoB,QAAxB,EAAkC;EAChC;EACA;EACA,IAAID,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kCAAvB,CAArB;;EACA,IAAI,CAACF,cAAL,EAAqB;IACnBA,cAAc,GAAGC,QAAQ,CAACE,aAAT,CAAuB,MAAvB,CAAjB;IACAH,cAAc,CAACI,YAAf,CAA4B,MAA5B,EAAoC,yBAApC;IACAJ,cAAc,CAACI,YAAf,CAA4B,SAA5B,EAAuC,EAAvC;IACA,MAAMC,IAAI,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;;IACA,IAAIG,IAAJ,EAAU;MACRA,IAAI,CAACN,OAAL,CAAaC,cAAb;IACD;EACF;EACD;AACF;AACA;AACA;AACA;;;EACE,MAAMM,YAAN,SAA2BpB,UAA3B,CAAsC;IACpCqB,MAAM,CAACC,IAAD,EAAOlB,OAAP,EAAgB;MACpB,IAAI,KAAKI,GAAL,IAAY,KAAKA,GAAL,CAASe,QAAT,CAAkB,QAAlB,CAAhB,EAA6C;QAC3C,KAAKC,MAAL,GAAcV,cAAd;MACD;;MACD,OAAO,MAAMO,MAAN,CAAaC,IAAb,EAAmBlB,OAAnB,CAAP;IACD;;EANmC;;EAQtCE,KAAK,GAAGH,kBAAkB,CAAC;IACzBK,GAAG,EAAE,KADoB;IAEzBM;EAFyB,CAAD,EAGvBM,YAHuB,CAA1B;AAID;;AACD,eAAe,SAASK,oBAAT,CAA8BC,KAA9B,EAAqC;EAClD,MAAM;IACJC,WADI;IAEJC;EAFI,IAGFF,KAHJ;EAIA,OAAOC,WAAW,IAAIrB,KAAf,GAAuB,aAAaJ,IAAI,CAACJ,aAAD,EAAgB;IAC7D+B,KAAK,EAAEvB,KADsD;IAE7DsB,QAAQ,EAAEA;EAFmD,CAAhB,CAAxC,GAGFA,QAHL;AAID;AACDE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,oBAAoB,CAACQ,SAArB,GAAiC;EACvE;AACF;AACA;EACEL,QAAQ,EAAE/B,SAAS,CAACqC,IAJmD;;EAKvE;AACF;AACA;AACA;AACA;EACEP,WAAW,EAAE9B,SAAS,CAACsC;AAVgD,CAAzE,GAWI,KAAK,CAXT"},"metadata":{},"sourceType":"module"}